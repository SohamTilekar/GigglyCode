struct Rectangle {
    width: int;
    height: int;

    def __init__(self: Rectangle, width: int, height: int) {
        self.width = width;
        self.height = height;
    };

    def area(self: Rectangle) -> int {
        return self.width * self.height;
    };

    def perimeter(self: Rectangle) -> int {
        return 2 * (self.width + self.height);
    };
};

@generic(T: Any)
struct ListNode {
    value: T;
    next: ListNode[T];

    def __init__(self: ListNode[T], value: T, next: ListNode[T]) {
        self.value = value;
        self.next = next;
    };
};

@generic(T: Any)
struct LinkedList {
    head: ListNode[T];

    def __init__(self: LinkedList[T]) -> void {
        self.head = nullptr;
    };

    def add(self: LinkedList[T], value: T) -> void {
        newNode: ListNode[T] = new ListNode(T, value, nullptr);
        if (self.head == nullptr) {
            self.head = newNode;
        } else {
            current: ListNode[T] = self.head;
            while (current.next != nullptr) {
                current = current.next;
            }
            current.next = newNode;
        };
    };
};

def subtract(a: int, b: int) -> int {
    return a - b;
};

def subtract(a: float, b: float) -> float {
    printf("%f:%f\n", a, b);
    return a - b;
};

struct Point {
    X: int;
    Y: int;
    def __init__(self: Point, X: int, Y: int) {
        self.X = X;
        self.Y = Y;
    };
    def __init__(self: Point) {}; # Garbage Initilizer
    def __sub__(self: Point, _other: Point) -> float {
        deltaX: int = self.X - _other.X;
        deltaY: int = self.Y - _other.Y;
        printf("Delta X: %d\n", deltaX);
        printf("Delta Y: %d\n", deltaY);
        deltaX_squared: int = deltaX * deltaX;
        deltaY_squared: int = deltaY * deltaY;
        printf("Delta X Squared: %d\n", deltaX_squared);
        printf("Delta Y Squared: %d\n", deltaY_squared);
        sum_of_squares: int = deltaX_squared + deltaY_squared;
        printf("Sum of Squares: %d\n", sum_of_squares);
        distance: float = math.sqrt(sum_of_squares);
        printf("Distance: %f\n", distance);
        return distance;
    };
};

struct Square {
    bottomLeft: Point;
    topLeft: Point;
    def __init__(self: Square, bottomLeft: Point, topLeft: Point) {
        self.bottomLeft = bottomLeft;
        self.topLeft = topLeft;
    };
    def __init__(self: Square) {}; # Garbage Initilizer
    def getLen(self: Square) -> float {
        return self.bottomLeft - self.topLeft;
    };
};

def main() -> int {
    rect: Rectangle = Rectangle(10, 20);
    printf("Rectangle area: %i\n", rect.area());
    printf("Rectangle perimeter: %i\n", rect.perimeter());

    LinkedList(int);
    intList: LinkedList[int] = LinkedList(int);
    intList.add(10);
    intList.add(20);
    intList.add(30);
    current: ListNode[int] = intList.head;
    while (current != nullptr) {
        printf("List node value: %lld\n", current.value);
        current = current.next;
    }

    printf("Subtract integers: %i\n", subtract(10, 5));
    printf("Subtract floats: %f\n", subtract(10.5, 5.5));

    val: int = 2;
    switch (val) {
        case (1) {
            printf("Value is 1.\n");
        } case (2) {
            printf("Value is 2.\n");
        } case (3) {
            printf("Value is 3.\n");
        } other {
            printf("Value is unknown.\n");
        }
    }

    counter: int = 0;
    while (counter < 5) {
        printf("Counter: %i\n", counter);
        counter = counter + 1;
    };

    arr: raw_array[int] = raw_array(int, 5);
    i: int = 0;
    while (i < 5) {
        arr[i] = i * 10;
        i = i + 1;
    };
    i = 0;
    while (i < 5) {
        printf("Array element %i : %i\n", i, arr[i]);
        i = i + 1;
    };

    sq_10by10: auto = Square(Point(0, 0), Point(10, 10));
    printf("Length of the side of the square is: %lf\n", sq_10by10.getLen());

    return 0;
}